{"ast":null,"code":"var _jsxFileName = \"/Users/ehsan/Desktop/lambda Build/frontend/src/components/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import schema from './comp/schema'\n// import axios from \"axios\";\n// import * as yup from \"yup\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Account = props => {\n  _s();\n\n  // to keep track of your input\n  const [comment, setComment] = useState({\n    title: '',\n    body: \"\",\n    //////////\n    email: \"\",\n    password: '',\n    terms: false ///////\n\n  }); // to keep track of our errors\n\n  const [errors, setErrors] = useState({\n    title: '',\n    body: \"\",\n    //////////\n    email: \"\",\n    password: '',\n    terms: \"\" ///////\n\n  });\n  const [disabled, setDisabled] = useState(true); // useEffect(() => {\n  //     schema.isValid(comment).then(valid => {\n  //\n  //         setDisabled(!valid)\n  //     })\n  //\n  // }, [comment])\n  // const validation = (name, value) => {\n  //\n  //     yup.reach(schema, name).validate(value).then(valid => {\n  //         setErrors({...errors, [name]: ''}) // clearing error if user did the right thing\n  //     }).catch(err => {\n  //         // console.log(err)   /// this tell our   schema set errors\n  //         setErrors({\n  //             ...errors, [name]: err.errors[0]\n  //         })\n  //     });\n  // };\n  //////////////////////////// setting up axios //////////////////////////\n  //     const [post, setPost] = useState([])  // i didnt use it\n  //\n  //     /*  1)   go to  submit function */\n  //\n  //     const [postError, setPostError] = useState()\n  ////////////////////////////////// End ////////////////////////////////\n\n  const changeinput = event => {\n    // event.persist()   /// add this after seting up the error validation\n    const {\n      value,\n      name,\n      type,\n      checked\n    } = event.target;\n    const newValue = type === \"checkbox\" ? checked : value; // validation(name, newValue)   // add this after persist is added\n\n    setComment({ ...comment,\n      [name]: newValue\n    });\n  }; // get some updates when we are doing axios\n\n\n  const submit = event => {\n    event.preventDefault(); // // axios.post('https://reqres.in/api/user', comment)   /// 2 step for requesting data\n    // //     .then(response => {\n    // //         generateData(comment)   /// this what will sent our data to app.js\n    //         setComment({title: '', body: '', email: \"\", password: '', terms: ''})     // i move this and one under it so when post was sucessfull it get added to the page\n    //         // console.log(response.data) //// our data was posted\n    //         setPost(response.data)  ///\n    //         // console.log(response.data) //// our data was posted\n    //     }).catch(error => {\n    //     setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\")\n    // })\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'title',\n      children: [\" Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": 'title',\n        id: 'title',\n        name: \"title\",\n        onChange: changeinput,\n        value: comment.title,\n        placeholder: 'write title'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"body\",\n      children: [\" Body\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        \"data-cy\": \"body\",\n        name: 'body',\n        onChange: changeinput,\n        value: comment.body,\n        placeholder: 'In 20 words or more explain it to me'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'email',\n      children: [\" Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"email\",\n        id: 'email',\n        name: \"email\",\n        onChange: changeinput,\n        value: comment.email,\n        placeholder: 'Enter your email address',\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'password',\n      children: [\" Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"password\",\n        id: 'password',\n        name: \"password\",\n        onChange: changeinput,\n        value: comment.password,\n        type: \"password\",\n        placeholder: \"Enter your password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'terms',\n      children: [\" Terms and Conditions\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"terms\",\n        type: \"checkbox\",\n        name: \"terms\",\n        checked: comment.terms,\n        value: comment.terms,\n        onChange: changeinput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      \"data-cy\": \"submit\",\n      disabled: disabled,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Account, \"Dig85feDq4Geq0Ou4EGOfyQfK0E=\");\n\n_c = Account;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/ehsan/Desktop/lambda Build/frontend/src/components/Account.js"],"names":["React","useState","useEffect","Account","props","comment","setComment","title","body","email","password","terms","errors","setErrors","disabled","setDisabled","changeinput","event","value","name","type","checked","target","newValue","submit","preventDefault"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n// import schema from './comp/schema'\n// import axios from \"axios\";\n\n// import * as yup from \"yup\"\n\nconst Account = (props) => {\n\n\n\n\n    // to keep track of your input\n\n    const [comment, setComment] = useState({\n        title: '',\n        body: \"\",\n        //////////\n        email: \"\",\n        password: '',\n        terms: false,\n        ///////\n\n    })\n\n    // to keep track of our errors\n\n    const [errors, setErrors] = useState({\n        title: '',\n        body: \"\",\n        //////////\n        email: \"\",\n        password: '',\n        terms: \"\",\n        ///////\n\n    })\n\n    const [disabled, setDisabled] = useState(true)\n\n\n\n    // useEffect(() => {\n    //     schema.isValid(comment).then(valid => {\n    //\n    //         setDisabled(!valid)\n    //     })\n    //\n    // }, [comment])\n\n\n\n\n    // const validation = (name, value) => {\n    //\n    //     yup.reach(schema, name).validate(value).then(valid => {\n    //         setErrors({...errors, [name]: ''}) // clearing error if user did the right thing\n    //     }).catch(err => {\n    //         // console.log(err)   /// this tell our   schema set errors\n    //         setErrors({\n    //             ...errors, [name]: err.errors[0]\n    //         })\n    //     });\n    // };\n\n//////////////////////////// setting up axios //////////////////////////\n//     const [post, setPost] = useState([])  // i didnt use it\n//\n//     /*  1)   go to  submit function */\n//\n//     const [postError, setPostError] = useState()\n\n\n////////////////////////////////// End ////////////////////////////////\n\n    const changeinput = (event) => {\n        // event.persist()   /// add this after seting up the error validation\n        const {value, name, type, checked} = event.target\n        const newValue = type === \"checkbox\" ? checked : value\n        // validation(name, newValue)   // add this after persist is added\n        setComment({...comment, [name]: newValue})\n    }\n\n\n    // get some updates when we are doing axios\n    const submit = (event) => {\n        event.preventDefault()\n\n        // // axios.post('https://reqres.in/api/user', comment)   /// 2 step for requesting data\n        // //     .then(response => {\n        // //         generateData(comment)   /// this what will sent our data to app.js\n        //         setComment({title: '', body: '', email: \"\", password: '', terms: ''})     // i move this and one under it so when post was sucessfull it get added to the page\n        //         // console.log(response.data) //// our data was posted\n        //         setPost(response.data)  ///\n        //         // console.log(response.data) //// our data was posted\n        //     }).catch(error => {\n        //     setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\")\n        // })\n    }\n\n\n    return (\n        <form onSubmit={submit}>\n            <label htmlFor={'title'}> Name:\n                <input\n                    data-cy={'title'}\n                    id={'title'}\n                    name=\"title\"\n                    onChange={changeinput}\n                    value={comment.title}\n                    placeholder={'write title'}\n                />\n\n                {/*after yup is fully finished */}\n\n                {/*{errors.title.length > 0 ? <p className={\"error\"}>{errors.title}</p> : null}*/}\n\n            </label>\n            <label htmlFor={\"body\"}> Body\n                <textarea\n                    data-cy={\"body\"}\n                    name={'body'}\n                    onChange={changeinput}\n                    value={comment.body}\n                    placeholder={'In 20 words or more explain it to me'}\n                />\n                {/*{errors.body.length > 0 ? <p className={\"error\"}>{errors.body}</p> : null}*/}\n            </label>\n\n            {/*/////////////////////////////////////////////////// email password and checkbox   //////////////////////////*/}\n\n            <label htmlFor={'email'}> Email\n                <input\n                    data-cy={\"email\"}\n                    id={'email'}\n                    name=\"email\"\n                    onChange={changeinput}\n                    value={comment.email}\n                    placeholder={'Enter your email address'}\n                    type=\"email\"\n                />\n                {/*{errors.email.length > 0 ? <p className={\"error\"}>{errors.email}</p> : null}*/}\n            </label>\n\n            <label htmlFor={'password'}> Password\n                <input\n                    data-cy={\"password\"}\n                    id={'password'}\n                    name=\"password\"\n                    onChange={changeinput}\n                    value={comment.password}\n                    type={\"password\"} placeholder={\"Enter your password\"}\n                />\n                {/*{errors.password.length > 0 ? <p className={\"error\"}>{errors.password}</p> : null}*/}\n            </label>\n\n            <label htmlFor={'terms'}> Terms and Conditions\n\n                <input\n                    data-cy={\"terms\"}\n                    type=\"checkbox\"\n                    name=\"terms\"\n                    checked={comment.terms}\n                    value={comment.terms}\n                    onChange={changeinput}\n                />\n                {/*{errors.terms.length > 0 ? <p className={\"error\"}>{errors.terms}</p> : null}*/}\n            </label>\n\n\n            {/*/////////////////////////////////////////////////// end  ///////////////////////////////////////////////////*/}\n\n            {/*<pre className={'error'}>{JSON.stringify(postError, null, 2)}</pre>*/}\n            {/*// to show the error from error .catch i  axios*/}\n\n            <button data-cy={\"submit\"} disabled={disabled}>submit</button>\n\n\n        </form>\n    )\n\n\n}\nexport default Account"]},"metadata":{},"sourceType":"module"}